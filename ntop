#! /usr/bin/python3

from __future__ import print_function
from bcc import BPF
from time import sleep
import argparse
import signal
import traceback
import socket
import struct
import ctypes
import psutil

bpf_text = """
#include <uapi/linux/ptrace.h>
#include <net/sock.h>
#include <bcc/proto.h>
#include <linux/ip.h>
#include <linux/udp.h>

#define UDP_PROTOCOL 0x11
#define TCP_PROTOCOL 0x06

struct traffic_key {
    char comm[16];
    u8   protocol;
    u32  daddr;
    u16  dport;
};

struct sock_info {
    struct sock *sk;
    u32    daddr;
    u16    dport;
};

BPF_HASH(laddr2ifindex, u32, int);
BPF_HASH(tx_bytes, struct traffic_key);
BPF_HASH(rx_bytes, struct traffic_key);
BPF_HASH(sock_infos, u32, struct sock_info);

static void accumulate_traffic(int size, int egress, u8 protocol)
{
    u32 tid = bpf_get_current_pid_tgid();
    struct traffic_key key = {};
    struct sock *sk;
    struct sock_info *si;
    u32 laddr;
    int *ifindex;

    si = sock_infos.lookup(&tid);
    if (!si) {
        return;
    }

    sk = si->sk;
    if (!sk) {
        return;
    }

    if (sk->sk_family != AF_INET)
        return;

    laddr = sk->sk_rcv_saddr;
    ifindex = laddr2ifindex.lookup(&laddr);

    if (FILTER_IFINDEX != 0 && (!ifindex || *ifindex != FILTER_IFINDEX))
        return;

    if (FILTER_PORT != 0 && FILTER_PORT != sk->sk_dport)
        return;

    bpf_get_current_comm(&key.comm, sizeof(key.comm));
    key.protocol = protocol;
    key.daddr = si->daddr;
    key.dport = si->dport;

    if (egress)
        tx_bytes.increment(key, size);
    else
        rx_bytes.increment(key, size);
}

int tcp_func_entry(struct pt_regs *ctx, struct sock *sk)
{
    u32 tid = bpf_get_current_pid_tgid();
    struct sock_info si = {0};
    si.sk = sk;
    si.daddr = sk->sk_daddr;
    si.dport = sk->sk_dport;
    sock_infos.update(&tid, &si);
}

int tcp_sendmsg_ret(struct pt_regs *ctx)
{
    int ret = PT_REGS_RC(ctx);
    if (ret > 0)
        accumulate_traffic(ret, 1, TCP_PROTOCOL);
    return 0;
}

int tcp_recvmsg_ret(struct pt_regs *ctx)
{
    int ret = PT_REGS_RC(ctx);
    if (ret > 0)
        accumulate_traffic(ret, 0, TCP_PROTOCOL);
    return 0;
}

int udp_sendmsg_entry(struct pt_regs *ctx, struct sock *sk, struct msghdr *msg, size_t len)
{
    u32 daddr = sk->sk_daddr;
    u16 dport = sk->sk_dport;
    struct sockaddr_in *usin = msg->msg_name;
    u32 tid = bpf_get_current_pid_tgid();
    struct sock_info si = {0};

    if (daddr == 0) {
        daddr = usin->sin_addr.s_addr;
                dport = usin->sin_port;
    }

    si.daddr = daddr;
    si.dport = dport;
    si.sk = sk;
    sock_infos.update(&tid, &si);
    return 0;
}

int udp_sendmsg_ret(struct pt_regs *ctx)
{

    int ret = PT_REGS_RC(ctx);
    if (ret > 0)
        accumulate_traffic(ret, 1, UDP_PROTOCOL);

    return 0;
}

int skb_consume_udp_entry(struct pt_regs *ctx, struct sock *sk, struct sk_buff *skb, int len)
{
    struct iphdr *iph = (struct iphdr *)(skb->head + skb->network_header);
    struct udphdr *udph = (struct udphdr *)(skb->head + skb->transport_header);
    struct traffic_key key;

    if (sk->sk_family != AF_INET)
        return 0;

    if (len <= 0)
        return 0;

    if (FILTER_IFINDEX != 0 && FILTER_IFINDEX != skb->skb_iif)
        return 0;

    if (FILTER_PORT != 0 && FILTER_PORT != udph->source)
        return 0;

    memset(&key, 0, sizeof(key));
    bpf_get_current_comm(&key.comm, sizeof(key.comm));
    key.protocol = UDP_PROTOCOL;
    key.daddr = iph->saddr;
    key.dport = udph->source;
    u16 len2 = iph->tot_len;
    rx_bytes.increment(key, len);
    return 0;
}
"""

class Tool(object):
    def __init__(self):
        examples = """examples:
        ./ntop -i eth0 -t -p 443 -n 20 -s 5"
        """
        parser = argparse.ArgumentParser(
            description = "bpfcc tool, used to show top n traffic",
            formatter_class = argparse.RawDescriptionHelpFormatter,
            epilog = examples)

        parser.add_argument("-i", "--interface", help = "capture interface name", type = str, default = "any")
        parser.add_argument("-t", "--tcp", help = "capture tcp traffic", action = "store_true")
        parser.add_argument("-u", "--udp", help = "capture udp traffic", action = "store_true")
        parser.add_argument("-p", "--port", help = "capture remote port", type = int, default = 0)
        parser.add_argument("-n", "--number", help = "show n top traffic", type = int, default = 10)
        parser.add_argument("-s", "--second", help = "time interval, seconds", type = int, default = 2)

        self.args = parser.parse_args()

        if self.args.interface == "any":
            ifindex = 0
        else:
            ifindex = socket.if_nametoindex(self.args.interface)

        if not self.args.tcp and not self.args.udp:
            self.args.tcp = True
            self.args.udp = True

        global bpf_text
        bpf_text = bpf_text.replace("FILTER_IFINDEX", str(ifindex))
        bpf_text = bpf_text.replace("FILTER_PORT", str(socket.htons(self.args.port)))
        if self.args.tcp and self.args.udp:
            bpf_text = bpf_text.replace("FILTER_PROTOCOL", "0")
        elif self.args.tcp:
            bpf_text = bpf_text.replace("FILTER_PROTOCOL", "0x06")
        else:
            bpf_text = bpf_text.replace("FILTER_PROTOCOL", "0x11")
        self.bpf = BPF(text=bpf_text)

        if_addrs = psutil.net_if_addrs()
        laddr2ifindex = self.bpf["laddr2ifindex"]
        for ifname in if_addrs:
            addrs = if_addrs[ifname]
            ifindex = socket.if_nametoindex(ifname.split(":")[0])
            for addr in addrs:
                if addr.family.name == 'AF_INET':
                    laddr = int.from_bytes(socket.inet_aton(addr.address), byteorder="little")
                    laddr2ifindex[ctypes.c_uint32(laddr)] = ctypes.c_int(ifindex)

    @staticmethod
    def _signal_ignore(signal, frame):
        print()

    def attach(self):
        if self.args.tcp:
            self.bpf.attach_kprobe(event = "tcp_sendmsg", fn_name = "tcp_func_entry")
            self.bpf.attach_kprobe(event = "tcp_recvmsg", fn_name = "tcp_func_entry")
            self.bpf.attach_kretprobe(event = "tcp_sendmsg", fn_name = "tcp_sendmsg_ret")
            self.bpf.attach_kretprobe(event = "tcp_recvmsg", fn_name = "tcp_recvmsg_ret")

        if self.args.udp:
            self.bpf.attach_kprobe(event = "udp_sendmsg", fn_name = "udp_sendmsg_entry")
            self.bpf.attach_kprobe(event = "skb_consume_udp", fn_name = "skb_consume_udp_entry")
            self.bpf.attach_kretprobe(event = "udp_sendmsg", fn_name = "udp_sendmsg_ret")

    def detach(self):
        if self.args.tcp:
            self.bpf.detach_kprobe(event="tcp_sendmsg")
            self.bpf.detach_kprobe(event="tcp_recvmsg")
            self.bpf.detach_kretprobe(event="tcp_sendmsg")
            self.bpf.detach_kretprobe(event="tcp_recvmsg")

        if self.args.udp:
            self.bpf.detach_kprobe(event="udp_sendmsg")
            self.bpf.detach_kprobe(event="skb_consume_udp")
            self.bpf.detach_kretprobe(event="udp_sendmsg")


    def run(self):
        print("start record traffic\"... Hit Ctrl-C to end.")

        exiting = 0
        while True:
            self.attach()
            try:
                sleep(self.args.second)
            except KeyboardInterrupt:
                exiting = 1
                # as cleanup can take many seconds, trap Ctrl-C:
                signal.signal(signal.SIGINT, Tool._signal_ignore)
            self.detach()

            tx_bytes = self.bpf["tx_bytes"]
            rx_bytes = self.bpf["rx_bytes"]

            traffic_infos = {}
            def merge_traffic(dir, dir_bytes):
                for k, v in dir_bytes.items():
                    comm = k.comm.decode("utf-8")
                    addr = (k.daddr << 32) | (k.dport << 16) | k.protocol
                    if addr not in traffic_infos:
                        traffic_infos[addr] = {
                            "protocol": k.protocol == 0x06 and "tcp" or "udp",
                            "address": "%s:%d" % (socket.inet_ntoa(struct.pack("I", k.daddr)), socket.ntohs(k.dport)),
                            "tx" : 0,
                            "rx" : 0,
                            "comm" : set()
                        }
                    traffic_infos[addr][dir] = traffic_infos[addr][dir] + v.value
                    if comm not in traffic_infos[addr]["comm"]:
                        traffic_infos[addr]["comm"].add(comm)

            merge_traffic("tx", tx_bytes)
            merge_traffic("rx", rx_bytes)

            print("%-10s %25s %10s %10s %50s" % ("PROTOCOL", "ADDRESS", "TX Mb/s", "RX Mb/s", "COMM"))
            n = 0
            for _, v in sorted(traffic_infos.items(), key=lambda tup: tup[1]["tx"]+tup[1]["rx"], reverse=True):
                comm_str = ",".join(v["comm"])
                print("%-10s %25s %10.2f %10.2f %50s" %
                     (v["protocol"],
                     v["address"],
                     v["tx"] * 8 / 1024.0 / 1024.0 / self.args.second,
                     v["rx"] * 8 / 1024.0 / 1024.0 / self.args.second,
                     comm_str))
                n = n + 1
                if n >= self.args.number:
                    break
            if exiting:
                print("Detaching...")
                exit()
            else:
                tx_bytes.clear()
                rx_bytes.clear()
                print()

if __name__ == "__main__":
    try:
        Tool().run()
    except Exception:
        traceback.print_exc()

